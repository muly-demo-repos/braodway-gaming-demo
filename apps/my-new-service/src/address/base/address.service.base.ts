/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Address as PrismaAddress,
  Customer as PrismaCustomer,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class AddressServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(args: Omit<Prisma.AddressCountArgs, "select">): Promise<number> {
    return this.prisma.address.count(args);
  }

  async addresses(args: Prisma.AddressFindManyArgs): Promise<PrismaAddress[]> {
    return this.prisma.address.findMany(args);
  }
  async address(
    args: Prisma.AddressFindUniqueArgs
  ): Promise<PrismaAddress | null> {
    return this.prisma.address.findUnique(args);
  }
  async createAddress(args: Prisma.AddressCreateArgs): Promise<PrismaAddress> {
    return this.prisma.address.create(args);
  }
  async updateAddress(args: Prisma.AddressUpdateArgs): Promise<PrismaAddress> {
    return this.prisma.address.update(args);
  }
  async deleteAddress(args: Prisma.AddressDeleteArgs): Promise<PrismaAddress> {
    return this.prisma.address.delete(args);
  }

  async uploadTmpFile<T extends Prisma.AddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaAddress> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/";
    const tmpFile = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.address.update({
      where: args.where,

      data: {
        tmpFile: tmpFile as InputJsonValue,
      },
    });
  }

  async downloadTmpFile<T extends Prisma.AddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindUniqueArgs>
  ): Promise<FileDownload> {
    const { tmpFile } = await this.prisma.address.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      tmpFile as unknown as LocalStorageFile
    );
  }

  async deleteTmpFile<T extends Prisma.AddressFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AddressFindUniqueArgs>
  ): Promise<PrismaAddress> {
    const { tmpFile } = await this.prisma.address.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      tmpFile as unknown as LocalStorageFile
    );

    return await this.prisma.address.update({
      where: args.where,

      data: {
        tmpFile: Prisma.DbNull,
      },
    });
  }

  async findCustomers(
    parentId: string,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.address
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customers(args);
  }
}
